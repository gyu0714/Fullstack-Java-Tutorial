step05_OOP

OOP(Object Oriented Programming)

[학습]
API(Application Programming Interface)
	- 라이브러리(Library)
	- 프로그램 개발을 위해 제공되는 클래스 또는 인터페이스
	- String, System, ...
	- 주로 java.lang
	
1.
1) [Ex01LangPackage]
	- Object 클래스
		- hashCode() : 객체의 주소값을 정수로 변환 및 반환
		- toString() : 문자열로 된 객체의 정보를 반환
	
	- System 클래스
		- gerProperty()
		- gc() : garbage collector 쓰레기 수집기
			메모리가 낭비될 떄 자동으로 호출 된다. 
			
	- String 클래스
		- equals() : 문자열의 내용 비교
		- charAt() : 지정 인덱스의 위치 문자를 반환
		- length() : 문자열의 길이 반환
		- toLowerCase(), toUpperCase() : 대소문자 변환
		- subString : 지정 위치에서 또 다른 위치의 잘라낸 문자열 반환
		- replace : 변경 대상 문자열 => 지정 문자열로 변경된 결과 반환
		- trim : 문자열의 앞, 뒤 빈 공백 제거한 결과 반환
		- split : 특정 구분자를 기준으로 분리된 문자열 결과 반환 - 배열 반환
		- StringBuilder
	
	- Wrapper 클래스 : 기본타입의 값을 갖는 객체 생성
		- Boxing : 객체타입으로 변경
		- unBoxing : 객체타입을 기본타입으로 변경
		- getClass() : Class 타입 확인
		- parse() : 문자열ㅇ르 기본타입으로 변환
		- Math() : 수학적 계산을 위한 클래스
			- abs : 절댓값
			- ceil : 올림값
			- floor : 내림값
			- round : 반올림		
			
2) [Ex02UtilPackage]
	- java.util
	- Data
	- Calendar
	- SimpleDataFormat
	
3) [Ex03TimePackage]
 	- LocalDate 클래스
 	- LocalTime 클래스
 	- LocalDateTime 클래스
	
[2. 상속(Inheritance)]
	- 부모가 자식에게 물려주는 행위
		- 상속하는 클래스
			:상위, parent, super, base
			
		- 상속받는 클래스
			: 하위, child, sub, derived
			
	- 문법
	class [상속받는 클래스명] extends [상속하는 클래스] {
		클래스의 구성요소 중 "변수"와 "메소드"만 상속
		상속받은 클래스만이 가질 수 있는 변수, 메소드 추가 개발 가능
	}

	- super() : 부모를 의미
		- 하위 클래스에서 가지는 상위 클래스에 대한 참조 값
		- 상위클래스의 기본 생성자를 호출
		- 상위 클래스(부모) 객체의 참조값을 가지므로 메소드 혹은 멤버 변수에 접근 가능
	
	- 어노테이션(@Annotation) : 자바 소스 코드를 컴파일 하는 경우 컴파일러에게 특별한 정보를 제공
		- 종류
			@Override : 재정의된 메소드
			@Deprecated : 이후 버전에서는 사용되지 않을 수도 있는 변수, 메소드
			@SuppressWarnings : 특정 경고 제외
	
	- 필요성  
		- 재사용성 : 기존의 구현 코드를 상속받아서 사용
		- 확장성 : 필요한 속성 혹은 기능을 개발
		
		- IS-A : 관계에서 상속이 가능하다!
			- 상위 클래스 : 하위 클래스 보다 일반적인 개념(ex. Person)
			- 하위 클래스 : 상위 클래스 보다 구체적인 개념(ex. Customer, Manager, ...)
		- HAS-A : 
		
[3. 객체 지향 - 다형성]
		1. 다형성(Polymorphism) : 형태 = 타입(클래스)
			- 자식 객체는 자식타입으로 생성 가능
			- 부모 객체는 부모타입으로 생성 가능
			- 자식 객체는 부모타입으로 생성 가능
			- 부모 객체는 자식타입으로 생성 가능
			
		2. UpCasting : 자식 객체가 부모타입으로 형변환 하면서 생성되는 것
		3. DownCasting : 부모타입으로 생성된 자식객체가 자신의 타입으로 형변환 하는 것
		4. instanceof : 객체 타입 확인
			- 문법 : 객체 instanceof 타입
			- 결과 : boolean(true or false)
		
[4. 추상 클래스(Abstract Class)]
	- int add(int x, int y); // 추상메소드
	- 추상 메소드를 포함하고 있는 클래스
	- abstract
	
	- 응용 : 템플릿 메소드 패턴(Template Method Pattern)
		- 코드의 시나리오를 정의하는 메소드
		- final로 선언하여 하위클래스에서는 재정의 불가
		- 프레임워크(Framework) 에서 많이 사용하는 설계 패턴
		- 장점 : 통일화된 사용 방법을 제안 가능
		
	- 라이브러리 vs 프레임워크
		- 도구
		- 차이점?
	
			